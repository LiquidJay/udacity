{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red31\green55\blue77;\red38\green98\blue135;\red36\green36\blue36;
\red240\green240\blue240;\red38\green38\blue38;\red242\green242\blue242;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
{\field{\*\fldinst{HYPERLINK "http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/"}}{\fldrslt 
\f0\fs24 \cf0 http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/}}
\f0\fs24 \
\pard\pardeftab720\sl880\sa230

\f1\b\fs56 \cf2 \expnd0\expndtw0\kerning0
Closures and Event Listeners\
\pard\pardeftab720\sl700\sa230

\fs44 \cf3 \expnd0\expndtw0\kerning0
The problem:\
\pard\pardeftab720\sl476\sa300

\b0\fs28 \cf4 \expnd0\expndtw0\kerning0
Let's say we're making an element for every item in an array. When each is clicked, it should alert its number. The simple approach would be to use a for loop to iterate over the list elements, and when the click happens, alert the value of 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
num
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
 as we iterate over each item of the array. Here's an example:\
\pard\pardeftab720\sl440

\f2\fs26 \cf6 \cb7 \expnd0\expndtw0\kerning0
// clear the screen for testing\
document.body.innerHTML = '';\
document.body.style.background="white";\
\
var nums = [1,2,3];\
\
// Let's loop over the numbers in our array\
for (var i = 0; i < nums.length; i++) \{\
\
    // This is the number we're on...\
    var num = nums[i];\
\
    // We're creating a DOM element for the number\
    var elem = document.createElement('div');\
    elem.textContent = num;\
\
    // ... and when we click, alert the value of `num`\
    elem.addEventListener('click', function() \{\
        alert(num);\
    \});\
\
    // finally, let's add this element to the document\
    document.body.appendChild(elem);\
\};\
\pard\pardeftab720\sl476\sa300

\f1\fs28 \cf4 \cb1 \expnd0\expndtw0\kerning0
If you run this code on any website, it will clear everything and add a bunch of numbers to the page. Try it! Open a new page, open the console, and run the above code. Then click on the numbers and see what gets alerted. Reading the code, we'd expect the numbers to alert their values when we click on them.\
But when we test it, all the elements alert the same thing: the last number. But why?\
\pard\pardeftab720\sl700\sa230

\b\fs44 \cf3 \expnd0\expndtw0\kerning0
What's actually happening\
\pard\pardeftab720\sl476\sa300

\b0\fs28 \cf4 \expnd0\expndtw0\kerning0
Let's cut out the irrelevant code so we can see what's going on. The comments below have changed, and explain what is actually happening.\
\pard\pardeftab720\sl440

\f2\fs26 \cf6 \cb7 \expnd0\expndtw0\kerning0
var nums = [1,2,3];\
\
for (var i = 0; i < nums.length; i++) \{\
\
    // This variable 
\f3\b \expnd0\expndtw0\kerning0
keeps changing
\f2\b0 \expnd0\expndtw0\kerning0
 every time we iterate!\
    //  It's first value is 1, then 2, then finally 3.\
    var num = nums[i];\
\
    // On click...\
    elem.addEventListener('click', function() \{\
\
        // ... alert num's value 
\f3\b \expnd0\expndtw0\kerning0
at the moment of the click
\f2\b0 \expnd0\expndtw0\kerning0
!\
        alert(num);\
\
        // Specifically, we're alerting the num variable \
        // that's defined 
\f3\b \expnd0\expndtw0\kerning0
outside
\f2\b0 \expnd0\expndtw0\kerning0
 of this inner function.\
        // Each of these inner functions are pointing to the\
        // same `num` variable... the one that changes on\
        // each iteration, and which equals 3 at the end of \
        // the for loop.  Whenever the anonymous function is\
        // called on the click event, the function will\
        //  reference the same `num` (which now equals 3).\
\
    \});\
\
\};\
\pard\pardeftab720\sl476\sa300

\f1\fs28 \cf4 \cb1 \expnd0\expndtw0\kerning0
That's why regardless of which number we click on, they all alert the last value of 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
num
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720\sl700\sa230

\b\fs44 \cf3 \expnd0\expndtw0\kerning0
How do we fix it?\
\pard\pardeftab720\sl476\sa300

\b0\fs28 \cf4 \expnd0\expndtw0\kerning0
The solution involves utilizing closures. We're going to create an inner scope to hold the value of 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
num
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
 
\b \expnd0\expndtw0\kerning0
at the exact moment we add the event listener
\b0 \expnd0\expndtw0\kerning0
. There are a number of ways to do this -- here's a good one.\
Let's simplify the code to just the lines where we add the event listener.\
\pard\pardeftab720\sl440

\f2\fs26 \cf6 \cb7 \expnd0\expndtw0\kerning0
var num = nums[i];\
\
elem.addEventListener('click', function() \{\
\
    alert(num);\
\
\});\
\pard\pardeftab720\sl476\sa300

\f1\fs28 \cf4 \cb1 \expnd0\expndtw0\kerning0
The 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
num
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
 variable changes, so we have to somehow connect it to our event listener function. Here's one way of doing it. First take a look at this code, then I'll explain how it works.\
\pard\pardeftab720\sl440

\f2\fs26 \cf6 \cb7 \expnd0\expndtw0\kerning0
elem.addEventListener('click', 
\f3\b \expnd0\expndtw0\kerning0
(function(numCopy) \{\
    return function() \{\
        alert(numCopy)\
    \};\
\})
\f2\b0 \expnd0\expndtw0\kerning0
(num));\
\pard\pardeftab720\sl476\sa300

\f1\fs28 \cf4 \cb1 \expnd0\expndtw0\kerning0
The bolded part is the outer function. We immediately invoke it by wrapping it in parentheses and calling it right away, passing in num. This method of wrapping an anonymous function in parentheses and calling it right away is called an IIFE (Immediately-Invoked Function Expression, pronounced like "iffy"). This is where the "magical" part happens.\
We're passing the value of 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
num
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
 into our outer function. Inside that outer function, the value is known as 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
numCopy
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
-- aptly named, since it's a copy of 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
num
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
 in that instant. Now it doesn't matter that 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
num
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
 changes later down the line. We stored the value of 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
num
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
 in 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
numCopy
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
 inside our outer function.\
Lastly, the outer function returns the inner function to the event listener. Because of the way JavaScript scope works, that inner function has access to 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
numCopy
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
. In the near future, 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
num
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
 will increment, but that doesn't matter. The inner function has access to 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
numCopy
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
, which will never change.\
Now, when someone clicks, it'll execute the returned inner function, alerting 
\f2\fs26 \cb5 \expnd0\expndtw0\kerning0
numCopy
\f1\fs28 \cb1 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720\sl700\sa230

\b\fs44 \cf3 \expnd0\expndtw0\kerning0
The Final Version\
\pard\pardeftab720\sl476\sa300

\b0\fs28 \cf4 \expnd0\expndtw0\kerning0
Here's our original code, but fixed up with our closure trick. Test it out!\
\pard\pardeftab720\sl440

\f2\fs26 \cf6 \cb7 \expnd0\expndtw0\kerning0
// clear the screen for testing\
document.body.innerHTML = '';\
\
var nums = [1,2,3];\
\
// Let's loop over the numbers in our array\
for (var i = 0; i < nums.length; i++) \{\
\
    // This is the number we're on...\
    var num = nums[i];\
\
    // We're creating a DOM element for the number\
    var elem = document.createElement('div');\
    elem.textContent = num;\
\
    // ... and when we click, alert the value of `num`\
    elem.addEventListener('click', (function(numCopy) \{\
        return function() \{\
            alert(numCopy);\
        \};\
    \})(num));\
\
    document.body.appendChild(elem);\
\};\
}